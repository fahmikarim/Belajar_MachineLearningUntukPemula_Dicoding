# -*- coding: utf-8 -*-
"""Projek_ML_FahmiKariem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J-LdGCTgNRZQne-H-LVtEde9tExRW6eN
"""

!pip install split-folders

"""FAHMI KARIEM

Tugas Proyek Akhir : Klasifikasi Gambar
"""

#harus mengimport tensorflow
import tensorflow as tf
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import splitfolders

#mempersiapkan dataset
!wget --no-check-certificate \
  https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip \
  -O /tmp/rockpaperscissors.zip

#mengekstrak file zip
import zipfile,os
local_zip = '/tmp/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

# Membagi dataset dengan seed yang ditentukan 40% validation set
splitfolders.ratio('/tmp/rockpaperscissors/rps-cv-images',
                   '/tmp/rockpaperscissors/images',
                   seed=42,
                   ratio=(.6, .4))

#Mendefinisikan nama direktori
base_dir = '/tmp/rockpaperscissors/images'
train_dir = os.path.join(base_dir, 'train')
validation_dir = os.path.join(base_dir, 'val')

os.listdir('/tmp/rockpaperscissors/images/train')

os.listdir('/tmp/rockpaperscissors/images/val')

#generator data dalam training dan validasi
train_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')

validation_datagen = ImageDataGenerator(
                    rescale=1./255)

#mengelola gambar
train_generator = train_datagen.flow_from_directory(
        train_dir,  # direktori data latih
        target_size=(150, 150),  # mengubah resolusi seluruh gambar menjadi 150x150 piksel
        batch_size=4,
        #  class_mode = 'categorical' karena terdapat 3 kelas
        class_mode='categorical')

validation_generator = validation_datagen.flow_from_directory(
        validation_dir, # direktori data validasi
        target_size=(150, 150), # mengubah resolusi seluruh gambar menjadi 150x150 piksel
        batch_size=4,
        #  class_mode = 'categorical' karena terdapat 3 kelas
        class_mode='categorical')

#mendefinisikan model cnn
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(512, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax') #softmax diperlukan untuk 3 label atau lebih
])

model.summary();

#kompilasi model dgn optimizer adam
model.compile(loss='categorical_crossentropy', #categorical karna 3 label
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

#melatih model
history = model.fit(
      train_generator,
      steps_per_epoch=25,  # berapa batch yang akan dieksekusi pada setiap epoch
      epochs=25,
      validation_data=validation_generator, # menampilkan akurasi pengujian data validasi
      validation_steps=5,  # berapa batch yang akan dieksekusi pada setiap epoch
      verbose=2)

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

uploaded = files.upload()

for fn in uploaded.keys():

  # predicting images
  path = fn
  img = image.load_img(path, target_size=(150,150))

  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  images = np.vstack([x])

  classes = model.predict(images, batch_size=10)
  prediction = np.argmax(classes)
  print(fn)
  if prediction==0:
   print('paper')
  elif prediction==1:
   print('rock')
  elif prediction==2:
   print('scissors')